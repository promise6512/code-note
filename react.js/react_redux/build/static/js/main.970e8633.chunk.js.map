{"version":3,"sources":["redux/constant.js","redux/actions/count.js","containers/Count/index.jsx","containers/Person/index.jsx","redux/actions/perspn.js","App.jsx","redux/reducers/person.js","redux/reducers/index.js","redux/reducers/count.js","redux/store.js","index.js"],"names":["INCREMENT","DECREMENT","ADD_PERSON","createIncrementAction","data","type","Count","calculate","id","value","selectNum","props","inc","dec","count","incAsync","this","perNum","ref","c","onClick","Component","connect","state","person","length","time","dispatch","setTimeout","Person","addPerson","name","nameNode","age","ageNode","personObj","nanoid","placeholder","allPerson","map","App","initState","combineReducers","prestate","action","preState","createStore","allReducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.970e8633.chunk.js","sourcesContent":["/* \r\n  该模块用于定义action对象中的常量\r\n*/\r\nconst INCREMENT = 'increment';\r\nconst DECREMENT = 'decrement';\r\nconst ADD_PERSON = 'addPerson';\r\nexport{INCREMENT,DECREMENT,ADD_PERSON}","/* \r\n   专门为Count组件生成action对象\r\n*/\r\nimport { INCREMENT,DECREMENT } from \"../constant\"\r\nexport const createIncrementAction =(data) => ({type:INCREMENT,data})\r\nexport const createDecrementAction =(data) => ({type:DECREMENT,data})\r\nexport const createIncrementAsyncAction = (data,time) => {\r\n   //异步action，action的类型为function\r\n   //同步action，action的类型为object\r\n   return (dispatch)=>{   \r\n      setTimeout(()=>{\r\n         dispatch(createIncrementAction(data))\r\n      },time)\r\n   }\r\n}","//引入connect用于连接UI组件和redux\r\nimport {connect} from 'react-redux'\r\nimport {createIncrementAction,\r\n        createDecrementAction,\r\n        createIncrementAsyncAction} from '../../redux/actions/count';\r\nimport React, { Component } from 'react';\r\n\r\n//定义UI组件\r\nclass Count extends Component {\r\n    //引入actionCreator 专门用于创建action对象\r\n    calculate = id => {\r\n        const value = +this.selectNum.value;\r\n      //  console.log(this.props)\r\n      //props属性中含有容器组件传递的属性count和方法inc dec和incAsync\r\n        if(id === 1){\r\n            this.props.inc(value)\r\n        }else if(id === 2){\r\n            this.props.dec(value)\r\n        }else if(id === 3){\r\n            if(this.props.count%2){\r\n                this.props.inc(value)\r\n            }\r\n        }else{\r\n            this.props.incAsync(value,500)\r\n        }      \r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>当前的和为 : {this.props.count}</h3>\r\n                <h4>personNum:{this.props.perNum}</h4>\r\n                <select ref = {c => {this.selectNum = c}}>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                </select>\r\n                &nbsp;<button onClick={ () => this.calculate(1)}>increment</button>\r\n                &nbsp;<button onClick={ () => this.calculate(2)}>decrement</button>\r\n                &nbsp;<button onClick={ () => this.calculate(3)}>incrementIfOdd</button>\r\n                &nbsp;<button onClick={ () => this.calculate()}>incrementAsync</button> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n//定义并暴露container组件\r\nexport default connect(\r\n    state => ({count:state.count,perNum:state.person.length}),\r\n    /* dispatch => \r\n    ({\r\n        inc:(data)=>dispatch(createIncrementAction(data)),\r\n        dec:(data)=>dispatch(createDecrementAction(data)),\r\n        incAsync:(data,time)=>dispatch(createIncrementAsyncAction(data,time))\r\n    }) */\r\n    {\r\n        //mapDispatchToProps的简化写法\r\n        //向CountUI传递对象，对象中的方法会变为CountUI props中的方法\r\n        //CountUI返回data后生成action 容器组件自动将action 发送(dispatch)给store\r\n        inc:createIncrementAction,\r\n        dec:createDecrementAction,\r\n        incAsync:createIncrementAsyncAction\r\n    }\r\n)(Count)","import React, { Component } from 'react'\r\nimport { nanoid } from 'nanoid'\r\nimport { connect } from 'react-redux';\r\nimport { createAddPersonAction } from '../../redux/actions/perspn'\r\nclass Person extends Component {\r\n    addPerson = () => {\r\n        const name = this.nameNode.value;\r\n        const age = this.ageNode.value;\r\n        if (name && age) {\r\n            const personObj = { id: nanoid(), name, age }\r\n            this.props.addPerson(personObj)\r\n            this.nameNode.value = '';\r\n            this.ageNode.value = '';\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>我是Person组件 count组件的和为:{this.props.count}</h3>\r\n                <input ref={c => this.nameNode = c} /* style={{width:'200px'}} */ type=\"text\" placeholder=\"please input name\" />&nbsp;\r\n                <input ref={c => this.ageNode = c} type=\"text\" placeholder=\"please input age\" />&nbsp;\r\n                <button onClick={this.addPerson}>Add</button>\r\n                <ul>\r\n                    {\r\n                        this.props.allPerson.map((personObj) => {\r\n                            return (\r\n                                <li key={personObj.id}>name:{personObj.name}---age:{personObj.age}</li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default connect(\r\n    state => ({ allPerson: state.person, count: state.count }),\r\n    {\r\n        addPerson: createAddPersonAction\r\n    }\r\n)(Person)","import {ADD_PERSON} from '../constant'\r\n//创建增加人的动作对象\r\nexport const createAddPersonAction = (personObj) => ({type:ADD_PERSON,data:personObj})","import React, { Component } from 'react'\nimport Count from './containers/Count' //引入count的容器组件\nimport Person from './containers/Person' //引入person的容器组件\nexport default class App extends Component {\n  render() {\n    return (\n      <div>    {/* 在provider中已经统一传递store，无需手动分别给每个容器传入 */}\n        <Count /* store={store} */></Count>\n        <Person/>\n      </div>\n    )\n  }\n}\n\n","import {ADD_PERSON} from '../constant';\r\nconst initState =[{id:'001',name:'hjp',age:20}]\r\n/* export default personReducer = (preState=initState,action) => {\r\n    const {type,data} = action;\r\n    switch (type) {\r\n        case ADD_PERSON:\r\n            return [data,...preState]\r\n        default:\r\n            return preState\r\n    }\r\n} */\r\nexport default function personReducer(preState=initState,action){\r\n    //console.log('@@@')\r\n    const {type,data} = action;\r\n    switch (type) {\r\n        case ADD_PERSON:\r\n            return [data,...preState]\r\n        default:\r\n            return preState\r\n    }\r\n}","/* \r\n    该文件用于汇总reducer\r\n*/\r\nimport { combineReducers } from 'redux'\r\n//引入为Count服务的reducer\r\nimport count from './count' \r\n//引入为person服务的reducer\r\nimport person from './person'\r\n\r\nexport default combineReducers({\r\n    count,\r\n    person\r\n})","/* \r\n   该文件创建一个为count服务的reducer\r\n       1.reducer的本质是函数\r\n       2.reducer会接到两个参数 分别为:之前的状态(prestate),动作对象(action)\r\n*/\r\nimport { INCREMENT,DECREMENT } from \"../constant\";\r\nconst initState = 0;\r\nexport default function countReducer(prestate=initState,action){\r\n    const {type,data} = action;\r\n    switch(type){\r\n        case INCREMENT:\r\n            return prestate + data;\r\n        case DECREMENT:\r\n            return prestate - data;\r\n        default:\r\n            return prestate\r\n    }\r\n}","/* \r\n   该文件专门用于暴露store对象 整个应用只有一个store对象\r\n*/ \r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n//引入createStore 专门用于创建redux中最为核心的store对象\r\nimport {createStore,applyMiddleware} from 'redux'\r\n//引入redux-thunk 用于支持异步action\r\nimport thunk from 'redux-thunk'\r\n\r\n//暴露store\r\n//export default createStore(countReducer,applyMiddleware(thunk))\r\n\r\nimport allReducers from './reducers'\r\nexport default createStore(allReducers,composeWithDevTools(applyMiddleware(thunk)))\r\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport store from './redux/store' \n\nReactDOM.render(\n    //此处需要用Provider包裹App\n    //使App后代中所有的容器组件接收到store\n    <Provider store={store}><App/></Provider>,\n    document.getElementById('root')\n);\n\n//使用react-redux后无需手动监听redux的状态变化\n/* store.subscribe(()=>{\n    ReactDOM.render( <App />,document.getElementById('root'));\n}) */"],"sourceRoot":""}